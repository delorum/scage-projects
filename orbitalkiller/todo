* при рисовании рамки в режиме карты писать длину ширину рамки

* использовать change-функцию чтобы останавливать ротацию полностью, если она ниже определенного предела

* при рисовании траектории на неделю использовать алгоритм уменьшения количества точек - оставлять только точки, которые отклоняются на значительный
угол, длинные линии кучей точек не рисовать

* уменьшить maxMultiplier эмпирически, чтобы орбита менялась незначительно хотя бы за неделю 6151

* писать steps в интерфейсе

* рисовать красным все работающие двиги в интерфейсе

* в интерфейсе писать в процентах вклад сил приятежния небесных тел

* режим отображения без следования за ротацией корабля, чтобы оси координат были неподвижны и ориентированы стандартно

* скорость относительно небесных тел вычисляется неверно, это видно на глаз: пишет что скорость больше одного километра в секунду, но расстояние
до небесного тела меняется явно медленнее чем на километр в секунду

* отключать полностью рендеринг при большом ускорении времени.

* Подсчитывать "эффективное ускорение времени" - сколько реально с учетом фпс удается посчитать тактов в секунду

* сохранение/загрузка

* писать "КА на таком-то расстоянии, относительная скорость такая-то" если расстояние меньше 50 км и есть возможность уравнять орбиты

* Может ли корабль крутится в другую сторону?

* Параметры орбиты - писать в соответствии с тем, что рисуем

* Полетный режим - полностью остановиться

* писать в двигателях вместо тактов время работы

* писать какие перегрузки испытает/испытывает космонавт

* если двигательная установка не работает, скрывать панель с двигателями и запланированными скоростями

* рисовать на планетах горы чтобы было видно движение корабля вдоль поверхности

* полетный режим - остановка относительно планеты

* физический движок: resting points, остановка двух тел при соприкосновении

* в режиме карты рисовать нулевой меридиан и вращать его в соответствии с вращением планеты

* писать скорость спутника/убегания только для небесного тела в сфере тяготения которого находимся

вычислять орбиты в action раз в n секунд используя actionDynamicPeriod - в зависимости от ускорения времени

фича в режиме карты: ткнуть в любую точку орбиты корабля и когда он ее достигнет, игра встанет на паузу,
ускорение времени будет сброшено до единицы.

подобрать интервал обновления орбит чтобы не дергалось так при ускорениях времени, чтобы типа интервал был функция от ускорения времени

режим расчета недельной траектории без обновления - по клавише

попробовать при сравнении скорости корабля с  первой-второй космическими использовать проекцию скорости на перпендикуляр к направлению на планету.

cancel расчет первой-второй космической скорости относительно гипотетического тела - суперпозиции оказывающих влияние небесных тел

В режиме карты режим рисования: центрировать на объекте-центре орбиты (если он есть)

Режим расчета орбиты - расчет на неделю, плюс возможность обновления

Попробовать посчитать ошибку измерения с разными коэффициентами ускорения

продлевать гиперболические орбиты нужным образом

рисовать параболическую орбиту

в режиме карты аналогично обычному режиму от корабля рисовать стрелку с указанием расстояния

апдейт орбиты алогоритм более умный

размеры и форма кораблей - сделать меньших размеров

* разобраться в отличиях absDeg, signedDeg, mydeg (deg360)
* синхронизация с планетой - не только вертикальная скорость но и горизонтальная!
* новые модели корабля и станции
* переписать коллизии на double

интерфейс: раскрывающиеся менюшки, которые можно перемещать по экрану и скрывать
* скрытие элементов интерфейса по клику

* постоянная вертикальная и горизонтальная скорости

* перегрузка при столкновении
* сохранять информацию о коллизиях
* подсчитывать среднюю перегрузку за секунду

* запас топлива. топливо кончается, но оч медленно, типа оно оч эффективное

* уменьшение топлива меняет массу корабля

* синхронизация орбит, встреча на орбите

* немного неверные расчеты будущей траектории

* мощность писать в килоньютонах

* гиперболическая орбита - определять, приближаемся к минимуму или нет
* эллиптическая орбита - определять, по часовой стрелке движемся или против

полная орбитальная математика - через сколько будем в такой-то точке итд

оптимизация рендеринга: то, что может меняться только после отработки физ движка вычислять раз в такт и сохранять, и в рендере просто показывать.
Сейчас некоторые вещи там вычисляются каждый раз, что замедляет рендеринг

Солнечная сторона/тень

Тела из нескольких форм, чтобы можно было невыпуклые многоугольники

cancel Расчет будущих значений по формулам

* реализовать стрелки, как элементы интерфейса

Перегрузка:
* столкновение: если больше 10м/с - разрушение корабля.
Разрушение корабля - на несколько мелких деталей, для зрелищности

обратный отсчет до потери сознания пилота при высоких перегрузках, чем выше, тем быстрее
период реабилитации после перегрузки
пилот умирает если перегрузка превысила некоторое значение (100g), теряет сознание и потом умирает, если перегрузка долго держится высокой

* отслеживать ускорение времени раз в 10 секунд. Если больше 1 и фактическое ускорение меньше заданного - выставлять по фактическому.

Моделирование атмосферы:
Синева неба - функция высоты
Атмосферное давление - функция высоты
Аэродинамическое сопротивление - функция скорости корабля и атмосферного давления (на площадь тела пофиг)

* Рисовать стрелки только при зуме больше 0.3

* При переходе в режим маневрирования выставлять мощность двигателей какую-то фиксированную. Например 50% максимального.

* В параметрах орбиты если r_p меньше нуля, нет смысла все остальные параметры, кроме r_a писать. Вместо "замкнутая" следует писать "суборбитальная"

Орбита Луны почему-то болтается
сделать обновление орбиты Луны аналогично кораблю и станции - раз в секунду

* Вектор скорости всегда фактический, но если на орбите Луны, то это неактуально: если встать по этому вектору и дать тягу, то орбита будет меняться совсем не так, как ожидаешь!

* Возможность задавать разрешение экрана настройками при запуске

* писать номера двигателей

* В режиме карты писать через сколько будем в данной точке орбиты, и какая там будет скорость
Балк М.Б. Элементы динамики космического полета

* Писать время и скорость в точке и для гиперболической орбиты

* currentSystemState может быть мапой

формализовать все, что есть в nextStep() кроме вызова очередного шага физического движка

* Внести в класс эллиптической орбиты расчеты истинной аномалии для точки и радиус вектора для точки.
* Мб и все остальное типа скоростей и формулы Ламберта

* подсказки по скорости снижения при посадке на планету - рисовать ее красным, если риск не успеть затормозиться

* рисовать свернутый интерфейс двигателей красным, если есть активные двигатели

* подсказка, через сколько корабль упадет в случае суборбитальной эллиптической траектории

падение на поверхность с гиперболической орбиты

убрать режим "полностью остановиться"

убрать режим "ориентация по осям"

на станции надо реализовать запрет вращения

Вынести физический движок в отдельный класс. Все, с ним связанное, туда же.

дополнительная проверка, чтобы предотвратить падение сквозь планету на очень высокой скорости

добавить режим "развернуться по направление к ближайшему кораблю"

пилоту нужно есть

пилоту нужно спать

пилоту нужно ходить в туалет. выбрасываемые за борт отходы уменьшают массу корабля

запас еды

поплнение запасов топлива и еды

когда пилот спит или потерял сознание, управлять кораблем нельзя

получение энергии от солнечных батарей. Необходимость ориентировать корабль, чтобы зарядить аккумуляторы

стыковка со станциями

стрельба ракетами.

посадка на планету в определенной точке

изменение орбиты спутника и сход с орбиты толканием

писать в интерфесе процент - сколько времени занимают расчеты данного элемента интерфеса

настраиваемые итерации расчета приближенного решения уравнения Кеплера, возможность отключить эти расчеты.

перемещение грузов с Луны на Землю или наоборот, сведение с орбиты и приземление

В режиме карты - возможность включать/отключать доп. инфу

Делать упор на менеджмент ресурсов:

Заряда батареи хватает на час

* Топлива хватает на три цикла Взлет с Земли - посадка на Луне (посчитать время работы двигателей с учетом мощности)

Ограниченный запас пищи и воды (на неделю или меньше)

* В режиме маневрирования сделать время работы двигателей минут 10-20

* функция gOrKg для отображения массы

* В режиме "уравнять скорость с планетой" странные возрастания средней перегрузке в интерфейсе

* писать километры в час для маленьких скоростей

* баг с переходом в режим "фиксация на орбите"

новый тип элемента интерфейса: переключатели. Всегда в нижнем меню в отдельной строке. Активные - желтые, неактивные - темносерые
km/sec или km/h; расчет будущих значений в режиме карты; подписи объектов

Элементы интерфейса одного типа группировать в свернутом виде с числом в скобках - сколько сгруппировано. При разворачивании брать первый попавшийся,
 разворачивать все друг под другом - такое нужно для нескольких кораблей (NearestShipInfo).

третья линия нижнего меню - рисовать или нет орбиты других кораблей

отдельно convex parts и crash parts - чтобы корабль мог разваливаться на более мелкие осколки

прорефакторить активацию двигателей при недостатке топлива - давать активировать двигатель следует только, если достаточно топлива на его работу!

прорефакторить переход в режим маневрирования:
все двигатели отключить
выставить всем двигателям режим половина максимального
выставить время работы десять минут, либо на сколько хватит топлива для одного двигателя на полной мощности

Дизайнер корабля: возможность ставить движки под углом: в режиме установки двигателя проводим мышкой линию между двумя точками,
двигатель устанавливается по середине на линии, соединяющей эти две точки, выбираем, куда смотрит.

* Возможность ставить центр масс между клетками, а не в центре клетки

Температура нагрева в атмосфере и перегрузки.

В режиме стыковки - текущий шаг стыковки (вращение или какая скорость)

* Перегрузки в направлении грудь-спина (типа, спиной к работающему маршевому двигателю сидим):
20g - 9 секунд
10g - 1 минута
6g - 10 минут

* уничтожать корабль, если слишком близко подлетел к Солнцу (в будущем мб реализовать в рамках температурного апдейта - разрушение вследствие
чрезмерного нагрева)

* Рисовать точки Лагранжа в режиме карты

* Баг: автоматические маневры на очень легком корабле (100 кг топлива) фактически не работают

======================
План завершения разработки:
* 1. Вычислять какой из двух периодов орбиты для сближения с целью реалистичный, писать только один и писать: надо ускориться или замедлиться.
* 2. Вычислять и писать скорость в данной точке орбиты - для эллиптической и гиперболической орбит.
* 3. Добавить Солнце.
* 4. Добавить разрушение корабля на части. Разрушать его всегда при достижении критического ускорения.
* 5. Проверка столкновения корабля с планетой. Чтобы даже если на очень большой скорости корабль пролетел сквозь границу без коллизии,
он все равно разрушился.
* 6. Рисовать касательные между краями солнца и планет, чтобы показать область тени (и впоследствии вычислять и писать)
* 7. Вычислять и писать максимальное сближение между кораблями в данной точке орбиты
* 8. Вычислять положение корабля на орбите в зависимости от времени
9. Сохранение/загрузка

======================
Новый план:
1. Доделки интерфейса:
1.1 Новый тип элемента интерфейса: переключатели. Всегда в нижнем меню в отдельной строке. Активные - желтые, неактивные - темносерые
km/sec или km/h; расчет будущих значений в режиме карты; подписи объектов, количество итераций для решения уравнения Кеплера, позиции для стыковки
1.2 Элементы интерфейса одного типа группировать в свернутом виде с числом в скобках - сколько сгруппировано.
При разворачивании брать первый попавшийся, разворачивать все друг под другом - такое нужно для нескольких кораблей (NearestShipInfo).
1.3 Третья линия нижнего меню - переключатели, рисовать или нет орбиты других кораблей
2. Добавить еще КА: старый спутник связи (сбить толканием), спутник-шпион (сбить ракетой) - орбита Земли,
контейнер (доставить на орбиту Земли с заданными параметрами) - орбита Луны, спутник-шпион - орбита Луны. Имеющуюся станцию перевести на более
высокую орбиту.
3. Остальное, относящееся к сюжету.
4. Остальной реализм и менеджмент ресурсов: электричество, еда, вода

=======================

Обновления:
* Ракетное оружие.

На Земле и Луне посадочные площадки и базы.

Сюжетное обновление: элемент интерфейса "сообщение по радио".

* Критические и смертельные перегрузки, автоматика контроля перегрузки (не допускать мощность работы двигателя, чтобы ускорение было длительно
выше 2g).

Ресурсы: вода, еда, кислород. Без воды и еды максимум два дня.

Электроэнергия. Запас, расход, пополнение (типа солнечные батареи).

Температура. Перегрев на солнце, перегрев при входе в атмосферу, разрушение от перегрева. В атмосферу можно входить только под определенным углом.
В космосе нужно вращаться, чтобы корпус не перегревался на солнце (режим барбекю у Аполлонов).
В тени во первых все системы работают на аккумуляторах, во вторых еще какой-нибудь негативный эффект от охлаждения

На Земле помимо гор - развалины домов.

Наверное апдейт версии 2.0: внутренний план корабля, возможность пилоту перемещаться по нему в соответствии с законами физики (если корабль
вращается, то действуют центробежные силы, если реактивный двигатель включен, то сила от него, итд).
Эффекты от нахождения пилота в различных помещениях: внешний обзор и карта доступны, толькое сли пилот в отсеке управления. Пилоту надо есть - это
в столовую, спать в отсеке для сна. Что нить чинить пусть ему надо время от времени, включая ВКД. Дублирующие схемы питания агрегатов корабля можно
включать, отключать, наддув и разгерметизация отсеков итд. Короче некий аналог FTL, только плюс имеюща

провести отдельное исследование эффективности различных вариантов предпроверок функции collision detection.

* баг: в режиме стыковки неверный расчет перегрузки
* доработка: сопротивление воздуха действует только, если корабль не прикрыт никаким препятствием прямо перед собой (например, другим кораблем)
* доработка: ограничение мощноси двигателя с учетом настройки gSwitcher - если пристыкованы, брать общую массу корабль+станция, а не один корабль
* доработка: обломки исчезают спустя минуту и если расстояние до игрока больше 1000 км, сгорают в атмосфере на случайно высоте от 30 до 40 км.
* доработка: оптимизировать потребление топлива в режимах автоматической стыковки и зависания над поверхностью - на больших расстояниях не так
строго следовать погрешности расстояния
* доработка: не позволять включать верхний двигатель, если пристыкованы

баг: расчет сил для системы состыкованных кораблей, в частности, сопротивления воздуха.
* при самоуничтожении ракеты обнулять ее относительную скорость, чтобы такой шарик остался
* при падении на планету наоборот делать подинамичнее разлет обломков

* При расчете коллизий проверять - проверяли ли уже два данных тела. Иначе может быть несколько одинаковых проверок!

Подлететь к спутнику, скачать данные, после этого уничтожить

* Переделать алгоритм расчета периода орбиты для встречи с другим кораблем - считать, сколько кораблю осталось до нашей точки встречи и на это время увеличивать или уменьшать период нашей орбиты. Это позволит в любой точке орбиты
перехватить корабль (сейчас вроде бы только в перигее или апогее).

* Подумать над удалением обломков или какой-то другой оптимизации, чтобы обломки не сказывались на производительности сильно.
Доставка грузов: с орбиты Земли на поверхность Луны в определенную точку; с поверхности Луны на орбиту Земли с определенными параметрами.

Придумать какие-нибудь ограничения, чтобы механика стрельбы ракетами была поинтереснее.
вариант: стрельба с большого расстояния

Ввести тип кораблей, чтобы отличать ракеты от остальных.

протестить вхождение в атмосферу по гиперболической траектории

* глюк с предсказанием орбиты - рисуется проходящей не через наш корабль

писать статус и непилотируемого корабля. Писать перегрузку и для непилотируемого корабля

* баг: при падении на землю часть осколков провалилась под поверхность
* сделать для Wreck такую же проверку, как для PolygonShip - если провалился сквозь землю, то удаление

* рисовать перигеи и апогеи орбит

сделать автоматические алгоритмы дополнительными модулями, которые надо покупать за накопленные очки
сделать их потреблять электричество, чтобы была необходимость перераспределять ограниченные энергоресурсы  (FTL, да)
сделать возможность прокачивать энергоресурсы - покупать и ставить более мощную батарейку

как-нибудь хитрее рассчитывать минимальный separation между орбитами, а не как сейчас - на апогее/перигее и берем минимальный из них
например, поискать алгоритм, рассчитывающий точки пересечения двух эллипсов

* Автоматические орбиты: если мы далеко от корабля, находящегося на стабильной орбите, и не в режиме карты: не рассчитывать его траекторию вообще,
* выкинуть его из физического движка. Если в режиме карты, рассчитывать его траекторию просто математикой
* Обновление концепции:
* Если корабль дальше чем 1000 км от нас на стабильной орбите (перигей выше), у него есть интерфейс, и он свернут, то:
* делаем его неактивным, и не обновляем вообще

Переключатель относительно чего орбиту рисовать: Автоматическая, Земля, Луна, Солнце.

Новый масштаб для отрисовки далеких орбит других планет

* запилить в ConvexPartsQuickMapper проверку, выпуклый многогранник или нет

тепловой щит - если входить в атмосферу под неправильным углом, то сгораем

* переделать форму корабля игрока, чтобы была возможность забирать груз с поверхности (посадочные опоры по бокам,
дополнительные двигатели на этих опорах)

более реалистично: один маршевый двигатель с большой тягой, остальные двигатели ориентации с маленькой тягой

* proxy_ship:
* пусть двигатели принадлежат кому принадлежат, новые не надо создавать. Надо просто переписать функцию расчета тяги и момента для proxy_ship.